name: CI/CD - Node.js Docker

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clona o repositório
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Instala dependências do Node.js
      - name: Install dependencies
        run: npm install

      # 3. Executa testes (se falhar, pipeline para aqui)
      - name: Run tests
        run: npm test

      # 4. Build da imagem Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/git-lab:latest .

      # 5. Login no Docker Hub
      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Push para o Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/git-lab:latest

      # 7. Deploy na EC2 com rollback
      - name: Deploy na EC2 com rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            echo "Guardando imagem atual (rollback)"
            CURRENT_IMAGE=$(docker ps --filter "name=app" --format "{{.Image}}")

            echo "Pull da nova imagem"
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/git-lab:latest

            echo "Parando e removendo container atual"
            docker stop app || true
            docker rm app || true

            echo "Subindo novo container"
            if ! docker run -d --name app -p 80:3000 ${{ secrets.DOCKERHUB_USERNAME }}/git-lab:latest; then
              echo "Falha no novo container, restaurando a imagem anterior"
              if [ -n "$CURRENT_IMAGE" ]; then
                docker run -d --name app -p 80:3000 $CURRENT_IMAGE
              fi
              exit 1
            fi
